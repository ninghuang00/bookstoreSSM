<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
	
<!--  dao层配置-->	
		
	<!-- 加载数据库配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>

	<!-- 配置数据源 使用的是Druid数据源 -->
	<!--<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
		  <!--init-method="init" destroy-method="close">-->
		<!--<property name="driverClassName" value="${jdbc.driver}"/>-->
		<!--<property name="url" value="${jdbc.url}" />-->
		<!--<property name="username" value="${jdbc.username}" />-->
		<!--<property name="password" value="${jdbc.password}" />-->

		<!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
		<!--<property name="initialSize" value="1" />-->
		<!--&lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
		<!--<property name="maxActive" value="20" />-->

		<!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
		<!--<property name="minIdle" value="0" />-->
		<!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
		<!--<property name="maxWait" value="60000" />-->
		<!--<property name="poolPreparedStatements" value="true" />-->
		<!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
				  <!--value="33" />-->
		<!--&lt;!&ndash; 用来检测有效sql &ndash;&gt;-->
		<!--<property name="validationQuery" value="SELECT 'x' FROM DUAL" />-->
		<!--<property name="testOnBorrow" value="false" />-->
		<!--<property name="testOnReturn" value="false" />-->
		<!--<property name="testWhileIdle" value="true" />-->
		<!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
		<!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
		<!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
		<!--<property name="minEvictableIdleTimeMillis" value="25200000" />-->
		<!--&lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
		<!--<property name="removeAbandoned" value="true" />-->
		<!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
		<!--<property name="removeAbandonedTimeout" value="1800" />-->
		<!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
		<!--<property name="logAbandoned" value="true" />-->
		<!--&lt;!&ndash; 监控数据库 &ndash;&gt;-->
		<!--<property name="filters" value="mergeStat" />-->
	<!--</bean>-->


	<!--&lt;!&ndash;  让spring管理Sqlsessionfactory ，使用mybatis和spring整合包中的类-->
          <!--不需要在代码中重复生成Sqlsessionfactory对象&ndash;&gt;-->
	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
		<!--&lt;!&ndash; 数据库连接池 &ndash;&gt;-->
		<!--<property name="dataSource" ref="dataSource" />-->
		<!--&lt;!&ndash; 加载mybatis的全局配置文件 &ndash;&gt;-->
		<!--<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />-->
	<!--</bean>-->

	<!--&lt;!&ndash; mapper扫描器，在此配置后，不需要通过SqlSession对象的getMapper方法获取mapper接口的代理类的对象，可在代码中直接注入 &ndash;&gt;-->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
		<!--<property name="basePackage" value="cn.art.edu.mapper"></property>-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
	<!--</bean>-->




<!-- 配置数据库连接池 ，这里使用的是dbcp连接池-->
<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
       <property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="maxActive" value="100"/>
		<property name="maxIdle" value="5"/>
		<property name="validationQuery" value="select 1"/>
		<property name="testWhileIdle" value="true"/>
		<property name="timeBetweenEvictionRunsMillis" value="3600000"/>
		<property name="minEvictableIdleTimeMillis" value="1800000"/>
		<property name="testOnBorrow" value="true"/>
		
</bean>	 -->


	
	<!--service层配置  -->
	
	<!--<bean id="administratorService" class="cn.art.edu.service.impl.AdministratorServiceImpl"/>-->
	<!--<bean id="bossService" class="cn.art.edu.service.impl.BossServiceImpl"/>-->
	<!--<bean id="courseService" class="cn.art.edu.service.impl.CourseServiceImpl"/>-->
	<!--<bean id="sysService" class="cn.art.edu.service.impl.SysServiceImpl"/>-->
	<!--<bean id="emService" class="cn.art.edu.service.impl.EaseMobServiceImpl" /> -->
	<!--<bean id="guardianService" class="cn.art.edu.service.impl.GuardianServiceImpl" />-->
	<!--<bean id="teacherService" class="cn.art.edu.service.impl.TeacherServiceImpl" />-->
	<!--<bean id="commonService" class="cn.art.edu.service.impl.CommonServiceImpl" />-->

	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	
   <!-- 事务管理器配置
       对mybatis操作数据库进行事务控制，spring使用jdbc的事务控制类
		-->
	<!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
		<!--&lt;!&ndash; 数据源-->
		<!--dataSource在applicationContext-dao.xml中配置了-->
		 <!--&ndash;&gt;-->
		<!--<property name="dataSource" ref="dataSource"/>-->
	<!--</bean>-->

	<!-- 通知，声明式的事务管理 -->
	<!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
		<!--<tx:attributes>-->
			<!--&lt;!&ndash; 传播行为 &ndash;&gt;-->
			<!--<tx:method name="save*" propagation="REQUIRED"/>-->
			<!--<tx:method name="delete*" propagation="REQUIRED"/>-->
			<!--<tx:method name="insert*" propagation="REQUIRED"/>-->
			<!--<tx:method name="update*" propagation="REQUIRED"/>-->
			<!--<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>-->
			<!--<tx:method name="query*" propagation="SUPPORTS" read-only="true"/>-->
			<!--<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>-->
			<!--<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->
	<!---->
	<!--&lt;!&ndash; aop ，这里的意思是对cn.art.edu.service.impl包下的所有类的所有方法进行事务控制，这些方法在执行前后都会执行一些语句进行事务控制， 面向切面编程&ndash;&gt;-->
	<!--<aop:config>-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.art.edu.service.impl.*.*(..))"/>-->
	<!--</aop:config>-->

</beans>
